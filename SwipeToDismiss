
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.systemBarsPadding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.Icon
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.input.nestedscroll.NestedScrollConnection
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.platform.rememberNestedScrollInteropConnection
import androidx.compose.ui.unit.dp
import com.kapirti.elite.R.drawable as AppIcon
import androidx.compose.animation.*
import androidx.compose.material.DismissDirection
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.SwipeToDismiss
import androidx.compose.material.rememberDismissState
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier


@Composable
fun HomeScreen(
    nestedScrollInteropConnection: NestedScrollConnection = rememberNestedScrollInteropConnection()
) {
    val scrollState = rememberLazyListState()

    BoxWithConstraints(modifier = Modifier.fillMaxSize().nestedScroll(nestedScrollInteropConnection).systemBarsPadding()) {
        Column(modifier = Modifier.fillMaxSize()) {

            LazyColumn(state = scrollState,) {
                items(100) {
                    SwipeDismissItem(
                        background = { offsetX ->
                            val backgroundColor: Color = if (offsetX < -160.dp) {
                                MaterialTheme.colorScheme.error
                            } else {
                                MaterialTheme.colorScheme.background
                            }
                            Column(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .fillMaxHeight()
                                    .background(backgroundColor),
                                horizontalAlignment = Alignment.End,
                                verticalArrangement = Arrangement.Center
                            ) {
                                val padding: Dp by animateDpAsState(
                                    if (offsetX > -160.dp) 4.dp else 0.dp
                                )
                                Box(
                                    Modifier
                                        .width(offsetX * -1)
                                        .padding(padding)
                                ) {
                                    val height = (offsetX + 8.dp) * -1
                                    Surface(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(height)
                                            .align(Alignment.Center),
                                        shape = CircleShape,
                                        color = MaterialTheme.colorScheme.error
                                    ) {
                                        Box(
                                            modifier = Modifier.fillMaxSize(),
                                            contentAlignment = Alignment.Center
                                        ) {
                                            if (offsetX < -40.dp && offsetX > -152.dp) {
                                                val iconAlpha: Float by animateFloatAsState(
                                                    if (offsetX < -120.dp) 0.5f else 1f
                                                )

                                                Icon(
                                                    painter = painterResource(AppIcon.ic_launcher_foreground),
                                                    modifier = Modifier
                                                        .size(16.dp)
                                                        .graphicsLayer(alpha = iconAlpha),
                                                    tint = MaterialTheme.colorScheme.background,
                                                    contentDescription = null,
                                                )
                                            }
                                            val textAlpha by animateFloatAsState(
                                                if (offsetX > -144.dp) 0.5f else 1f
                                            )
                                            if (offsetX < -120.dp) {
                                                Text(
                                                    text = "delete",
                                                    style = MaterialTheme.typography.bodyLarge,
                                                    color = MaterialTheme.colorScheme.background,
                                                    textAlign = TextAlign.Center,
                                                    modifier = Modifier
                                                        .graphicsLayer(
                                                            alpha = textAlpha
                                                        )
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        onRemove = { }
                    ) {
                        Text("text", modifier = Modifier.fillMaxWidth())
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterialApi::class)
@Composable
private fun SwipeDismissItem(
    modifier: Modifier = Modifier,
    directions: Set<DismissDirection> = setOf(DismissDirection.EndToStart),
    enter: EnterTransition = expandVertically(),
    exit: ExitTransition = shrinkVertically(),
    background: @Composable (offset: Dp) -> Unit,
    onRemove: () -> Unit,
    content: @Composable (isDismissed: Boolean) -> Unit,
) {
    val dismissState = rememberDismissState(
        confirmStateChange = {
            onRemove()
            true
        }
    )
    val isDismissed = dismissState.isDismissed(DismissDirection.EndToStart)
    val offset = with(LocalDensity.current) { dismissState.offset.value.toDp() }

    AnimatedVisibility(
        modifier = modifier,
        visible = !isDismissed,
        enter = enter,
        exit = exit
    ) {
        SwipeToDismiss(
            modifier = modifier,
            state = dismissState,
            directions = directions,
            background = { background(offset) },
            dismissContent = { content(isDismissed) }
        )
    }
}
